/*
 * Copyright 2023-2025 Benoit Lacelle - SOLVEN
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package eu.solven.cleanthat.engine.java.refactorer;

import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.StandardOpenOption;
import java.util.Set;
import java.util.TreeSet;
import java.util.stream.Collectors;

import org.codehaus.plexus.languages.java.version.JavaVersion;
import org.junit.Test;

import eu.solven.cleanthat.engine.java.IJdkVersionConstants;
import eu.solven.cleanthat.engine.java.refactorer.meta.IMutator;
import eu.solven.cleanthat.engine.java.refactorer.mutators.composite.AllIncludingDraftSingleMutators;
import eu.solven.cleanthat.engine.java.refactorer.mutators.composite.CompositeMutator;
import eu.solven.cleanthat.engine.java.refactorer.test.LocalClassTestHelper;
import lombok.extern.slf4j.Slf4j;

// BEWARE: This will generate a versioned file: It may lead to unexpected result. However, it will also make sure this file is often up-to-date
@Slf4j
public class TestGenerateDocumentation_Tags {

	static final String EOL = System.lineSeparator();

	@Test
	public void doGenerateDocumentation() throws IOException {
		CompositeMutator<IMutator> allSingles =
				new AllIncludingDraftSingleMutators(JavaVersion.parse(IJdkVersionConstants.LAST));

		Set<String> tags = allSingles.getUnderlyings()
				.stream()
				.flatMap(m -> getTags(m).stream())
				.collect(Collectors.toCollection(TreeSet::new));

		var sb = new StringBuilder();
		sb.append("# Listing by Tags");

		tags.forEach(tag -> {
			sb.append(EOL).append(EOL).append("## ").append(tag).append(EOL);

			allSingles.getUnderlyings().stream().filter(m -> getTags(m).contains(tag)).forEach(mutator -> {
				sb.append(EOL).append("- ");
				TestGenerateDocumentation
						.appendLinkToClass(sb, mutator.getClass(), TestGenerateDocumentation.URL_PREFIX);
			});
		});

		sb.append(EOL).append(EOL).append("---").append(EOL).append(EOL).append("Generated by ");

		TestGenerateDocumentation.appendLinkToClass(sb, getClass(), TestGenerateDocumentation.URL_PREFIX_TEST);

		// Add EOL at EOF
		sb.append(EOL);

		Path srcMainResources = LocalClassTestHelper.getSrcMainResourceFolder();

		var targetFile = srcMainResources.resolve("../../../MUTATORS_BY_TAG.generated.MD").normalize();

		LOGGER.info("Writing into {}", targetFile);
		Files.writeString(targetFile, sb.toString(), StandardOpenOption.TRUNCATE_EXISTING, StandardOpenOption.CREATE);
	}

	private Set<String> getTags(IMutator m) {
		Set<String> allTags = new TreeSet<>(m.getTags());

		allTags.add("With JDK " + m.minimalJavaVersion());

		if (m.getPmdId().isPresent()) {
			allTags.add("PMD");
		}
		if (m.getCheckstyleId().isPresent()) {
			allTags.add("CheckStyle");
		}
		if (m.getErrorProneId().isPresent()) {
			allTags.add("ErrorProne");
		}
		if (m.getJSparrowId().isPresent()) {
			allTags.add("jSparrow");
		}
		if (m.getSonarId().isPresent()) {
			allTags.add("Sonar");
		}
		if (m.getSpotBugsId().isPresent()) {
			allTags.add("SpotBugs");
		}

		if (m.isDraft()) {
			allTags.add("Draft");
		}

		return allTags;
	}

}
